Traceback (most recent call last):
  File "/Users/tabel/opt/anaconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/tabel/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1304, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/tabel/opt/anaconda3/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/tabel/opt/anaconda3/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/tabel/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/tabel/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1020, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/tabel/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#Define X matrix
X = np.array([x**(i) for i in reversed(range(3))]).T
print('x shape', X.shape)

#define y vector (its already defined for us)
print('y shape ', y.shape)

#define weight matrix
W = np.diag(1/stds**2)
print('W shape', W.shape)

#Now solve for polynomial coefficients a,b,c:
#You can use np.linalg.inv() for matrix inverse, @ operator for matrix multiplication and .T for transpose
#e.g. np.linalg.inv(A.T@A)
theta = _______ 
a,b,c = theta

#your optimal quadratic model is now given by:
def quad(x):
    return a*x**2 + b*x + c 

#Calculate the sum of squared residuals (i.e. the minimum negative log likelihood), 
#these will be useful to compare models later:
residuals2 = np.sum((y-quad(x))**2 / stds**2)

#Plot the results:
plt.errorbar(x, y, yerr=stds,ls='',color='k',
             marker='o')
plt.plot(x,quad(x))

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[4], line 15[0m
[1;32m     10[0m [38;5;28mprint[39m([38;5;124m'[39m[38;5;124mW shape[39m[38;5;124m'[39m, W[38;5;241m.[39mshape)
[1;32m     12[0m [38;5;66;03m#Now solve for polynomial coefficients a,b,c:[39;00m
[1;32m     13[0m [38;5;66;03m#You can use np.linalg.inv() for matrix inverse, @ operator for matrix multiplication and .T for transpose[39;00m
[1;32m     14[0m [38;5;66;03m#e.g. np.linalg.inv(A.T@A)[39;00m
[0;32m---> 15[0m theta [38;5;241m=[39m [43m_______[49m 
[1;32m     16[0m a,b,c [38;5;241m=[39m theta
[1;32m     18[0m [38;5;66;03m#your optimal quadratic model is now given by:[39;00m

[0;31mNameError[0m: name '_______' is not defined
NameError: name '_______' is not defined

